//
//  MovieDetailPresenter.swift
//  Movies
//
//  Created ilker on 8.04.2020.
//  Copyright Â© 2020 ilker. All rights reserved.
//
//  Template generated by Suat Karakusoglu
//

import UIKit

final class MovieDetailPresenter: Presenter {
    
    typealias Command = MovieDetailPresenterCommand
    
    typealias Event = MovieDetailViewEvent
    
    typealias Request = MovieDetailInteractorRequest
    
    typealias Response = MovieDetailInteractorResponse
    
    var requestListener: AnyRequestListener<MovieDetailInteractorRequest>?
    
    var commandListener: AnyCommandListener<MovieDetailPresenterCommand>?
    
    var router: MovieDetailRouter?
    
    func handle(event: MovieDetailViewEvent) {
        switch event {
        case .viewDidLoad:
            self.commandListener?.handle(command: .setLoadingViewVisibility(shouldShow: true))
            self.requestListener?.handle(request: .getMovieDetail)
        case .backAction:
            self.router?.route(to: .backHomePage)
        @unknown default:
            print("ViewEvent should be handled at \(#function)")
        }
    }
    
    func handle(response: MovieDetailInteractorResponse) {
        switch response {
        case let .getMovieDetailResponse(movieDetail):
            self.commandListener?.handle(command: .loadMovieDetail(movieDetail: movieDetail))
            self.commandListener?.handle(command: .setLoadingViewVisibility(shouldShow: false))
        case .getMovieDetailResponseFailed:
            self.commandListener?.handle(command: .setLoadingViewVisibility(shouldShow: false))
            
        @unknown default:
            print("InteractorResponse should be handled at \(#function)")
        }
    }
}
